name: Deploy to Vercel

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      
      - name: Build web app
        run: ./gradlew composeApp:jsBrowserProductionWebpack
      
      - name: List build output
        run: |
          echo "Checking build output directories..."
          echo "=== Directory structure ==="
          ls -la composeApp/build/ || echo "build directory not found"
          echo ""
          echo "=== Looking for JS files ==="
          find composeApp/build -type f -name "*.js" 2>/dev/null | head -20 || echo "No JS files found"
          echo ""
          echo "=== Looking for webpack output ==="
          find composeApp/build -type d -name "*webpack*" 2>/dev/null || echo "No webpack directories"
          echo ""
          echo "=== Full tree (limited depth) ==="
          find composeApp/build -maxdepth 4 -type d 2>/dev/null || echo "Cannot list directories"

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Prepare deployment
        run: |
          # Look for the webpack output directory which contains all bundled JS files
          BUILD_DIR=""

          # Common webpack output locations for Kotlin/JS
          if [ -d "composeApp/build/dist/js/productionExecutable" ]; then
            BUILD_DIR="composeApp/build/dist/js/productionExecutable"
          elif [ -d "composeApp/build/distributions" ]; then
            BUILD_DIR="composeApp/build/distributions"
          else
            # Search for directory containing the main composeApp.js file
            MAIN_JS_PATH=$(find composeApp/build -name "*composeApp.js" -not -name "*.map" -type f | head -1)
            if [ -n "$MAIN_JS_PATH" ]; then
              BUILD_DIR=$(dirname "$MAIN_JS_PATH")
            fi
          fi

          if [ -z "$BUILD_DIR" ] || [ ! -d "$BUILD_DIR" ]; then
            echo "ERROR: Could not find webpack build output directory"
            echo "Searched locations:"
            echo "  - composeApp/build/dist/js/productionExecutable"
            echo "  - composeApp/build/distributions"
            echo ""
            echo "All JS files in build directory:"
            find composeApp/build -name "*.js" -type f 2>/dev/null || echo "No JS files found"
            exit 1
          fi

          echo "Found build directory: $BUILD_DIR"
          echo "Contents of build directory:"
          ls -la "$BUILD_DIR"

          # Create deployment directory
          mkdir -p deploy

          # Copy ALL files from the build directory (all JS files and dependencies)
          echo "Copying all build output files..."
          cp -r "$BUILD_DIR"/* deploy/

          echo "Files copied to deploy directory:"
          ls -la deploy/

          # Copy index.html from resources and update the script reference
          if [ -f "composeApp/src/webMain/resources/index.html" ]; then
            # Find the main JS file (usually Portfolio-composeApp.js or composeApp.js)
            MAIN_JS=$(find deploy -name "*composeApp.js" -not -name "*.map" | head -1 | xargs basename)

            if [ -z "$MAIN_JS" ]; then
              echo "ERROR: Could not find main JS file"
              exit 1
            fi

            echo "Found main JS file: $MAIN_JS"

            # Copy index.html and update script reference
            sed "s/composeApp\.js/$MAIN_JS/g" composeApp/src/webMain/resources/index.html > deploy/index.html

            # Copy any CSS files if they exist
            if [ -f "composeApp/src/webMain/resources/styles.css" ]; then
              cp composeApp/src/webMain/resources/styles.css deploy/
            fi

            # Copy PWA manifest
            if [ -f "composeApp/src/webMain/resources/manifest.json" ]; then
              cp composeApp/src/webMain/resources/manifest.json deploy/
              echo "✓ Copied manifest.json"
            fi

            # Copy any favicon or icon files
            for icon in composeApp/src/webMain/resources/*.{ico,png}; do
              if [ -f "$icon" ]; then
                cp "$icon" deploy/
                echo "✓ Copied $(basename $icon)"
              fi
            done

            # Copy SEO files (sitemap, robots.txt)
            if [ -f "composeApp/src/webMain/resources/sitemap.xml" ]; then
              cp composeApp/src/webMain/resources/sitemap.xml deploy/
              echo "✓ Copied sitemap.xml"
            fi

            if [ -f "composeApp/src/webMain/resources/robots.txt" ]; then
              cp composeApp/src/webMain/resources/robots.txt deploy/
              echo "✓ Copied robots.txt"
            fi
          else
            echo "ERROR: index.html not found in resources"
            exit 1
          fi

          cp vercel.json deploy/

          echo "Deployment directory contents:"
          ls -la deploy/

          # Verify index.html exists
          if [ ! -f "deploy/index.html" ]; then
            echo "ERROR: index.html not found in deploy directory!"
            echo "Files in deploy directory:"
            find deploy -type f
            exit 1
          fi

          echo "✓ index.html found in deployment directory"

          echo ""
          echo "All JavaScript files in deploy directory:"
          find deploy -name "*.js" -type f | sort

          echo ""
          echo "Verifying all required dependencies are present..."
          if find deploy -name "kotlin-kotlin-stdlib*.js" -type f | grep -q .; then
            echo "✓ kotlin-stdlib found"
          else
            echo "⚠ WARNING: kotlin-stdlib not found!"
          fi

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          cd deploy

          echo "Deploying to Vercel and waiting for completion..."

          # Deploy and capture the URL
          DEPLOYMENT_URL=$(vercel deploy --prod --yes --token=$VERCEL_TOKEN 2>&1 | tee /dev/tty | grep -Eo 'https://[a-zA-Z0-9./?=_%:-]*' | tail -1)

          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "ERROR: Failed to get deployment URL"
            exit 1
          fi

          echo "Deployment initiated: $DEPLOYMENT_URL"
          echo "Waiting for deployment to be ready..."

          # Wait for deployment to be ready (max 5 minutes)
          MAX_ATTEMPTS=60
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL")

            if [ "$HTTP_CODE" = "200" ]; then
              echo "✓ Deployment is live and responding with HTTP 200"
              echo "Deployment URL: $DEPLOYMENT_URL"
              exit 0
            else
              echo "Attempt $((ATTEMPT + 1))/$MAX_ATTEMPTS: HTTP $HTTP_CODE - waiting..."
              sleep 5
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done

          echo "ERROR: Deployment did not become ready within the timeout period"
          exit 1
